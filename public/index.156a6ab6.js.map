{"mappings":"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","sources":["<anon>","src/main.ts","src/modules/api.ts","src/modules/AssignmentService.ts","src/modules/render.ts","src/modules/sort.ts"],"sourcesContent":["// SCRUM BOARD APPLICATION\n// A task management application for development teams with the following features:\n// - Three-column board (New, In Progress, Done)\n// - Task management (create, assign, mark as done, delete)\n// - Team member management with specialized roles\n// - Filtering and sorting capabilities (only applies to \"in progress\" tasks)\n// - Role-based filtering (UX, Frontend, Backend)\n// - Member-based filtering\n// - Sorting by timestamp or title\n// this file contains the functions that will be used to interact with the API.\n// The functions will be used to fetch data from the API, add new members and assignments,\n// assign tasks to members, mark tasks as done, and remove tasks.\n// The functions will be used in the application to interact with the API and update\n// the state of the application.\nconst $fe11eb32f95cc6d1$var$API_BASE = \"https://fe24-js2-slutprojekt-back-linn-ahlrot.onrender.com/api\";\nasync function $fe11eb32f95cc6d1$export$f059b1ebfc1335c() {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/board`);\n        if (!res.ok) throw new Error(`Failed to fetch board: ${res.statusText}`);\n        const data = await res.json();\n        return data;\n    } catch (error) {\n        alert(error);\n        // Return empty data to prevent app crashes\n        return {\n            members: [],\n            assignments: []\n        };\n    }\n}\nasync function $fe11eb32f95cc6d1$export$d199869810608d4e(name, roles) {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/members`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                name: name,\n                roles: roles\n            })\n        });\n        if (!res.ok) throw new Error(`Failed to add member: ${res.statusText}`);\n        const member = await res.json();\n        return member;\n    } catch (error) {\n        alert(error);\n        return null;\n    }\n}\nasync function $fe11eb32f95cc6d1$export$fc41f58bd8b5bdc3(title, description, category) {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/assignments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title: title,\n                description: description,\n                category: category\n            })\n        });\n        if (!res.ok) throw new Error(`Failed to create assignment: ${res.statusText}`);\n        const data = await res.json();\n        return data;\n    } catch (error) {\n        alert(error);\n        return null;\n    }\n}\nasync function $fe11eb32f95cc6d1$export$13ce2202561ee22c(assignmentId, memberId) {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/assignments/assign`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                assignmentId: assignmentId,\n                memberId: memberId\n            })\n        });\n        if (!res.ok) throw new Error(`Failed to assign task: ${res.statusText}`);\n        return true;\n    } catch (error) {\n        alert(error);\n        return false;\n    }\n}\nasync function $fe11eb32f95cc6d1$export$ad679c2f191b46ef(assignmentId) {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/assignments/${assignmentId}/done`, {\n            method: \"PATCH\"\n        });\n        if (!res.ok) throw new Error(`Failed to mark task as done: ${res.statusText}`);\n        return true;\n    } catch (error) {\n        alert(error);\n        return false;\n    }\n}\nasync function $fe11eb32f95cc6d1$export$e0f6ca2291a97572(assignmentId) {\n    try {\n        const res = await fetch(`${$fe11eb32f95cc6d1$var$API_BASE}/assignments/${assignmentId}`, {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(`Failed to delete task: ${res.statusText}`);\n        return true;\n    } catch (error) {\n        alert(error);\n        return false;\n    }\n}\n\n\n// This file contains the AssignmentService class, which provides methods for creating new\n// assignments, assigning tasks to members, marking tasks as done, and removing tasks.\n\nclass $d7bba91f677dd1f3$export$fa3e20990fc9859e {\n    static async create(title, description, category) {\n        return await (0, $fe11eb32f95cc6d1$export$fc41f58bd8b5bdc3)(title, description, category);\n    }\n    static async assign(assignmentId, memberId) {\n        return await (0, $fe11eb32f95cc6d1$export$13ce2202561ee22c)(assignmentId, memberId);\n    }\n    static async markAsDone(assignmentId) {\n        return await (0, $fe11eb32f95cc6d1$export$ad679c2f191b46ef)(assignmentId);\n    }\n    static async remove(assignmentId) {\n        return await (0, $fe11eb32f95cc6d1$export$e0f6ca2291a97572)(assignmentId);\n    }\n}\n\n\n// this module is responsible for rendering the tasks on the page\n// and handling the assignment of tasks to members.\n\nfunction $1a5d3e8665c01fa1$export$88cc272b7f4c2e31(assignments, members) {\n    const columns = {\n        new: document.querySelector(\"#newTasks\"),\n        \"in progress\": document.querySelector(\"#inProgressTasks\"),\n        done: document.querySelector(\"#doneTasks\")\n    };\n    // Clear existing tasks but preserve headers\n    Object.values(columns).forEach((column)=>{\n        const header = column.querySelector(\"h2\");\n        column.innerHTML = \"\";\n        if (header) column.appendChild(header);\n    });\n    // Loop through all assignments once and place each one in the appropriate column\n    assignments.forEach((task)=>{\n        const taskEl = document.createElement(\"div\");\n        taskEl.className = \"task\";\n        taskEl.innerHTML = `\n      <strong>${task.title}</strong><br>\n      ${task.description}<br>\n      <small>${task.category}</small><br>\n      <small>${task.status}</small><br>\n      <small>${new Date(task.timestamp).toLocaleString()}</small><br>\n      ${task.assigned ? `Assigned to: ${members.find((m)=>m.id === task.assigned)?.name || \"Unknown\"}` : \"\"}\n    `;\n        // Adds buttons based on the task's status and assigns event listeners accordingly\n        if (task.status === \"new\") {\n            const assignSelect = document.createElement(\"select\");\n            members.filter((m)=>m.roles.includes(task.category)).forEach((member)=>{\n                const option = document.createElement(\"option\");\n                option.value = member.id;\n                option.textContent = member.name;\n                assignSelect.appendChild(option);\n            });\n            const assignBtn = document.createElement(\"button\");\n            assignBtn.textContent = \"Assign\";\n            assignBtn.onclick = async ()=>{\n                await (0, $d7bba91f677dd1f3$export$fa3e20990fc9859e).assign(task.id, assignSelect.value);\n                location.reload();\n            };\n            taskEl.appendChild(assignSelect);\n            taskEl.appendChild(assignBtn);\n        } else if (task.status === \"in progress\") {\n            const doneBtn = document.createElement(\"button\");\n            doneBtn.textContent = \"Mark as done\";\n            doneBtn.onclick = async ()=>{\n                await (0, $d7bba91f677dd1f3$export$fa3e20990fc9859e).markAsDone(task.id);\n                location.reload();\n            };\n            taskEl.appendChild(doneBtn);\n        } else if (task.status === \"done\") {\n            const deleteBtn = document.createElement(\"button\");\n            deleteBtn.textContent = \"Delete\";\n            deleteBtn.onclick = async ()=>{\n                await (0, $d7bba91f677dd1f3$export$fa3e20990fc9859e).remove(task.id);\n                location.reload();\n            };\n            taskEl.appendChild(deleteBtn);\n        }\n        // Add the task to the appropriate column based on its status\n        columns[task.status].appendChild(taskEl);\n    });\n}\n\n\n// This file filters and sort tasks that are in progress based on user input and updates\n// the UI accordingly. It also sets up event listeners for the filter and sort options.\n// The functions in this file are used to filter and sort tasks that are in progress based on\n// user input.\nfunction $e808a74419138310$export$c9ede5d8fd5daae1(allAssignments, sortOption, roleFilter, memberFilter) {\n    // Separate tasks by status\n    const newTasks = allAssignments.filter((task)=>task.status === \"new\");\n    const inProgressTasks = allAssignments.filter((task)=>task.status === \"in progress\");\n    const doneTasks = allAssignments.filter((task)=>task.status === \"done\");\n    // Only apply filtering to \"in progress\" tasks\n    let filteredInProgress = [\n        ...inProgressTasks\n    ];\n    // Filter by role if not \"all\"\n    if (roleFilter !== \"all\") filteredInProgress = filteredInProgress.filter((task)=>task.category === roleFilter);\n    // Filter by member if not \"all\"\n    if (memberFilter !== \"all\") filteredInProgress = filteredInProgress.filter((task)=>task.assigned === memberFilter);\n    const sortedInProgress = $e808a74419138310$export$a8401629531bc33e([\n        ...filteredInProgress\n    ], sortOption);\n    return [\n        ...newTasks,\n        ...sortedInProgress,\n        ...doneTasks\n    ];\n}\nfunction $e808a74419138310$export$a8401629531bc33e(tasks, sortOption) {\n    const [sortKey, sortOrder] = sortOption.split(\"-\");\n    return tasks.sort((a, b)=>{\n        if (sortKey === \"timestamp\") {\n            // Convert ISO timestamp strings to Date objects for proper comparison\n            const dateA = new Date(a.timestamp);\n            const dateB = new Date(b.timestamp);\n            return sortOrder === \"asc\" ? dateA.getTime() - dateB.getTime() : dateB.getTime() - dateA.getTime();\n        } else if (sortKey === \"title\") return sortOrder === \"desc\" ? a.title.localeCompare(b.title) : b.title.localeCompare(a.title);\n        return 0;\n    });\n}\nfunction $e808a74419138310$export$6dc3b2af96f29763(members, onFilterChange) {\n    $e808a74419138310$var$populateMemberFilter(members);\n    $e808a74419138310$var$setupFilterListeners(onFilterChange);\n}\nfunction $e808a74419138310$var$populateMemberFilter(members) {\n    const memberSelect = document.querySelector(\"#filterMembers\");\n    // Clear existing options except the first \"All\" option\n    while(memberSelect.options.length > 1)memberSelect.remove(1);\n    members.forEach((member)=>{\n        const option = document.createElement(\"option\");\n        option.value = member.id;\n        option.textContent = member.name;\n        memberSelect.appendChild(option);\n    });\n}\nfunction $e808a74419138310$var$setupFilterListeners(onFilterChange) {\n    const sortSelect = document.querySelector(\"#sortTasks\");\n    const roleFilter = document.querySelector(\"#filterTasks\");\n    const memberFilter = document.querySelector(\"#filterMembers\");\n    [\n        sortSelect,\n        roleFilter,\n        memberFilter\n    ].forEach((element)=>{\n        element.addEventListener(\"change\", onFilterChange);\n    });\n}\nfunction $e808a74419138310$export$cabde43f328d9d01() {\n    return {\n        sortOption: document.querySelector(\"#sortTasks\").value,\n        roleFilter: document.querySelector(\"#filterTasks\").value,\n        memberFilter: document.querySelector(\"#filterMembers\").value\n    };\n}\n\n\nconst $ad2bcec7a0192558$var$memberForm = document.querySelector(\"#addMemberForm\");\nconst $ad2bcec7a0192558$var$taskForm = document.querySelector(\"#addTaskForm\");\n// Store all data globally to avoid refetching when filters change\nlet $ad2bcec7a0192558$var$allMembers = [];\nlet $ad2bcec7a0192558$var$allAssignments = [];\nasync function $ad2bcec7a0192558$var$init() {\n    const scrumData = await (0, $fe11eb32f95cc6d1$export$f059b1ebfc1335c)();\n    $ad2bcec7a0192558$var$allMembers = scrumData.members;\n    $ad2bcec7a0192558$var$allAssignments = scrumData.assignments;\n    (0, $1a5d3e8665c01fa1$export$88cc272b7f4c2e31)($ad2bcec7a0192558$var$allAssignments, $ad2bcec7a0192558$var$allMembers);\n    (0, $e808a74419138310$export$6dc3b2af96f29763)($ad2bcec7a0192558$var$allMembers, $ad2bcec7a0192558$var$applyFiltersAndSort);\n    // Set up form event listeners\n    $ad2bcec7a0192558$var$memberForm.addEventListener(\"submit\", async (event)=>{\n        event.preventDefault();\n        const name = document.querySelector(\"#memberName\").value;\n        const roles = Array.from(document.querySelector(\"#memberRoles\").selectedOptions).map((o)=>o.value);\n        await (0, $fe11eb32f95cc6d1$export$d199869810608d4e)(name, roles);\n        location.reload();\n    });\n    $ad2bcec7a0192558$var$taskForm.addEventListener(\"submit\", async (event)=>{\n        event.preventDefault();\n        const title = document.querySelector(\"#taskTitle\").value;\n        const description = document.querySelector(\"#taskDescription\").value;\n        const category = document.querySelector(\"#taskCategory\").value;\n        await (0, $d7bba91f677dd1f3$export$fa3e20990fc9859e).create(title, description, category);\n        location.reload();\n    });\n}\nfunction $ad2bcec7a0192558$var$applyFiltersAndSort() {\n    const { sortOption: sortOption, roleFilter: roleFilter, memberFilter: memberFilter } = (0, $e808a74419138310$export$cabde43f328d9d01)();\n    const filteredAssignments = (0, $e808a74419138310$export$c9ede5d8fd5daae1)($ad2bcec7a0192558$var$allAssignments, sortOption, roleFilter, memberFilter);\n    (0, $1a5d3e8665c01fa1$export$88cc272b7f4c2e31)(filteredAssignments, $ad2bcec7a0192558$var$allMembers);\n}\n$ad2bcec7a0192558$var$init();\n$ad2bcec7a0192558$var$memberForm.reset();\n$ad2bcec7a0192558$var$taskForm.reset();\n\n\n//# sourceMappingURL=index.156a6ab6.js.map\n","// SCRUM BOARD APPLICATION\r\n\r\n// A task management application for development teams with the following features:\r\n\r\n// - Three-column board (New, In Progress, Done)\r\n// - Task management (create, assign, mark as done, delete)\r\n// - Team member management with specialized roles\r\n// - Filtering and sorting capabilities (only applies to \"in progress\" tasks)\r\n// - Role-based filtering (UX, Frontend, Backend)\r\n// - Member-based filtering\r\n// - Sorting by timestamp or title\r\n\r\nimport { fetchBoard, addMember } from \"./modules/api.ts\";\r\nimport { AssignmentService } from \"./modules/AssignmentService.ts\";\r\nimport { renderAssignments } from \"./modules/render.ts\";\r\nimport { RoleT, CategoryT, MemberI, AssignmentI } from \"./modules/types.ts\";\r\nimport {\r\n  filterAndSortAssignments,\r\n  setupSortAndFilters,\r\n  getCurrentFilterOptions,\r\n} from \"./modules/sort.js\";\r\n\r\nconst memberForm = document.querySelector(\"#addMemberForm\") as HTMLFormElement;\r\nconst taskForm = document.querySelector(\"#addTaskForm\") as HTMLFormElement;\r\n\r\n// Store all data globally to avoid refetching when filters change\r\nlet allMembers: MemberI[] = [];\r\nlet allAssignments: AssignmentI[] = [];\r\n\r\nasync function init() {\r\n  const scrumData = await fetchBoard();\r\n  allMembers = scrumData.members;\r\n  allAssignments = scrumData.assignments;\r\n\r\n  renderAssignments(allAssignments, allMembers);\r\n\r\n  setupSortAndFilters(allMembers, applyFiltersAndSort);\r\n\r\n  // Set up form event listeners\r\n  memberForm!.addEventListener(\"submit\", async (event) => {\r\n    event.preventDefault();\r\n    const name = (document.querySelector(\"#memberName\") as HTMLInputElement)\r\n      .value;\r\n    const roles = Array.from(\r\n      (document.querySelector(\"#memberRoles\") as HTMLSelectElement)\r\n        .selectedOptions\r\n    ).map((o) => o.value as RoleT);\r\n    await addMember(name, roles);\r\n    location.reload();\r\n  });\r\n\r\n  taskForm!.addEventListener(\"submit\", async (event) => {\r\n    event.preventDefault();\r\n    const title = (document.querySelector(\"#taskTitle\") as HTMLInputElement)\r\n      .value;\r\n    const description = (\r\n      document.querySelector(\"#taskDescription\") as HTMLInputElement\r\n    ).value;\r\n    const category = (\r\n      document.querySelector(\"#taskCategory\") as HTMLSelectElement\r\n    ).value as CategoryT;\r\n    await AssignmentService.create(title, description, category);\r\n    location.reload();\r\n  });\r\n}\r\n\r\nfunction applyFiltersAndSort() {\r\n  const { sortOption, roleFilter, memberFilter } = getCurrentFilterOptions();\r\n\r\n  const filteredAssignments = filterAndSortAssignments(\r\n    allAssignments,\r\n    sortOption,\r\n    roleFilter,\r\n    memberFilter\r\n  );\r\n\r\n  renderAssignments(filteredAssignments, allMembers);\r\n}\r\n\r\ninit();\r\nmemberForm.reset();\r\ntaskForm.reset();\r\n","// this file contains the functions that will be used to interact with the API.\r\n// The functions will be used to fetch data from the API, add new members and assignments,\r\n// assign tasks to members, mark tasks as done, and remove tasks.\r\n// The functions will be used in the application to interact with the API and update\r\n// the state of the application.\r\n\r\nimport { AssignmentI, CategoryT, MemberI, RoleT } from \"./types.ts\";\r\n\r\nconst API_BASE =\r\n  \"https://fe24-js2-slutprojekt-back-linn-ahlrot.onrender.com/api\";\r\n\r\nexport async function fetchBoard(): Promise<{\r\n  members: MemberI[];\r\n  assignments: AssignmentI[];\r\n}> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/board`);\r\n    if (!res.ok) throw new Error(`Failed to fetch board: ${res.statusText}`);\r\n    const data = await res.json();\r\n    return data;\r\n  } catch (error) {\r\n    alert(error);\r\n    // Return empty data to prevent app crashes\r\n    return { members: [], assignments: [] };\r\n  }\r\n}\r\n\r\nexport async function addMember(\r\n  name: string,\r\n  roles: RoleT[]\r\n): Promise<MemberI | null> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/members`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ name, roles }),\r\n    });\r\n    if (!res.ok) throw new Error(`Failed to add member: ${res.statusText}`);\r\n    const member = await res.json();\r\n    return member as MemberI;\r\n  } catch (error) {\r\n    alert(error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function createAssignment(\r\n  title: string,\r\n  description: string,\r\n  category: CategoryT\r\n): Promise<AssignmentI | null> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/assignments`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ title, description, category }),\r\n    });\r\n    if (!res.ok)\r\n      throw new Error(`Failed to create assignment: ${res.statusText}`);\r\n    const data = await res.json();\r\n    return data as AssignmentI;\r\n  } catch (error) {\r\n    alert(error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function assignTask(\r\n  assignmentId: string,\r\n  memberId: string\r\n): Promise<boolean> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/assignments/assign`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ assignmentId, memberId }),\r\n    });\r\n    if (!res.ok) throw new Error(`Failed to assign task: ${res.statusText}`);\r\n    return true;\r\n  } catch (error) {\r\n    alert(error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function markAsDone(assignmentId: string): Promise<boolean> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/assignments/${assignmentId}/done`, {\r\n      method: \"PATCH\",\r\n    });\r\n    if (!res.ok)\r\n      throw new Error(`Failed to mark task as done: ${res.statusText}`);\r\n    return true;\r\n  } catch (error) {\r\n    alert(error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function removeTask(assignmentId: string): Promise<boolean> {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/assignments/${assignmentId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!res.ok) throw new Error(`Failed to delete task: ${res.statusText}`);\r\n    return true;\r\n  } catch (error) {\r\n    alert(error);\r\n    return false;\r\n  }\r\n}\r\n","// This file contains the AssignmentService class, which provides methods for creating new\r\n// assignments, assigning tasks to members, marking tasks as done, and removing tasks.\r\n\r\nimport { createAssignment, assignTask, markAsDone, removeTask } from \"./api.ts\";\r\nimport { AssignmentI, CategoryT } from \"./types.ts\";\r\n\r\nexport class AssignmentService {\r\n  static async create(\r\n    title: string,\r\n    description: string,\r\n    category: CategoryT\r\n  ): Promise<AssignmentI | null> {\r\n    return await createAssignment(title, description, category);\r\n  }\r\n\r\n  static async assign(\r\n    assignmentId: string,\r\n    memberId: string\r\n  ): Promise<boolean> {\r\n    return await assignTask(assignmentId, memberId);\r\n  }\r\n\r\n  static async markAsDone(assignmentId: string): Promise<boolean> {\r\n    return await markAsDone(assignmentId);\r\n  }\r\n\r\n  static async remove(assignmentId: string): Promise<boolean> {\r\n    return await removeTask(assignmentId);\r\n  }\r\n}\r\n","// this module is responsible for rendering the tasks on the page\r\n// and handling the assignment of tasks to members.\r\n\r\nimport { AssignmentI, MemberI } from \"./types.ts\";\r\nimport { AssignmentService } from \"./AssignmentService.ts\";\r\n\r\nexport function renderAssignments(\r\n  assignments: AssignmentI[],\r\n  members: MemberI[]\r\n) {\r\n  const columns = {\r\n    new: document.querySelector(\"#newTasks\")!,\r\n    \"in progress\": document.querySelector(\"#inProgressTasks\")!,\r\n    done: document.querySelector(\"#doneTasks\")!,\r\n  };\r\n\r\n  // Clear existing tasks but preserve headers\r\n  Object.values(columns).forEach((column) => {\r\n    const header = column.querySelector(\"h2\");\r\n    column.innerHTML = \"\";\r\n    if (header) {\r\n      column.appendChild(header);\r\n    }\r\n  });\r\n\r\n  // Loop through all assignments once and place each one in the appropriate column\r\n  assignments.forEach((task) => {\r\n    const taskEl = document.createElement(\"div\");\r\n    taskEl.className = \"task\";\r\n    taskEl.innerHTML = `\r\n      <strong>${task.title}</strong><br>\r\n      ${task.description}<br>\r\n      <small>${task.category}</small><br>\r\n      <small>${task.status}</small><br>\r\n      <small>${new Date(task.timestamp).toLocaleString()}</small><br>\r\n      ${\r\n        task.assigned\r\n          ? `Assigned to: ${\r\n              members.find((m) => m.id === task.assigned)?.name || \"Unknown\"\r\n            }`\r\n          : \"\"\r\n      }\r\n    `;\r\n\r\n    // Adds buttons based on the task's status and assigns event listeners accordingly\r\n    if (task.status === \"new\") {\r\n      const assignSelect = document.createElement(\"select\");\r\n      members\r\n        .filter((m) => m.roles.includes(task.category))\r\n        .forEach((member) => {\r\n          const option = document.createElement(\"option\");\r\n          option.value = member.id;\r\n          option.textContent = member.name;\r\n          assignSelect.appendChild(option);\r\n        });\r\n      const assignBtn = document.createElement(\"button\");\r\n      assignBtn.textContent = \"Assign\";\r\n      assignBtn.onclick = async () => {\r\n        await AssignmentService.assign(task.id, assignSelect.value);\r\n        location.reload();\r\n      };\r\n      taskEl.appendChild(assignSelect);\r\n      taskEl.appendChild(assignBtn);\r\n    } else if (task.status === \"in progress\") {\r\n      const doneBtn = document.createElement(\"button\");\r\n      doneBtn.textContent = \"Mark as done\";\r\n      doneBtn.onclick = async () => {\r\n        await AssignmentService.markAsDone(task.id);\r\n        location.reload();\r\n      };\r\n      taskEl.appendChild(doneBtn);\r\n    } else if (task.status === \"done\") {\r\n      const deleteBtn = document.createElement(\"button\");\r\n      deleteBtn.textContent = \"Delete\";\r\n      deleteBtn.onclick = async () => {\r\n        await AssignmentService.remove(task.id);\r\n        location.reload();\r\n      };\r\n      taskEl.appendChild(deleteBtn);\r\n    }\r\n\r\n    // Add the task to the appropriate column based on its status\r\n    columns[task.status].appendChild(taskEl);\r\n  });\r\n}\r\n","// This file filters and sort tasks that are in progress based on user input and updates\r\n// the UI accordingly. It also sets up event listeners for the filter and sort options.\r\n// The functions in this file are used to filter and sort tasks that are in progress based on\r\n// user input.\r\n\r\nimport { AssignmentI, MemberI } from \"./types.ts\";\r\n\r\n// Filter and sort assignments based on given criteria - only for \"in progress\" tasks\r\nexport function filterAndSortAssignments(\r\n  allAssignments: AssignmentI[],\r\n  sortOption: string,\r\n  roleFilter: string,\r\n  memberFilter: string\r\n): AssignmentI[] {\r\n  // Separate tasks by status\r\n  const newTasks = allAssignments.filter((task) => task.status === \"new\");\r\n  const inProgressTasks = allAssignments.filter(\r\n    (task) => task.status === \"in progress\"\r\n  );\r\n  const doneTasks = allAssignments.filter((task) => task.status === \"done\");\r\n\r\n  // Only apply filtering to \"in progress\" tasks\r\n  let filteredInProgress = [...inProgressTasks];\r\n\r\n  // Filter by role if not \"all\"\r\n  if (roleFilter !== \"all\") {\r\n    filteredInProgress = filteredInProgress.filter(\r\n      (task) => task.category === roleFilter\r\n    );\r\n  }\r\n\r\n  // Filter by member if not \"all\"\r\n  if (memberFilter !== \"all\") {\r\n    filteredInProgress = filteredInProgress.filter(\r\n      (task) => task.assigned === memberFilter\r\n    );\r\n  }\r\n\r\n  const sortedInProgress = sortTasks([...filteredInProgress], sortOption);\r\n\r\n  return [...newTasks, ...sortedInProgress, ...doneTasks];\r\n}\r\n\r\n// Sort assignments based on the given option\r\nexport function sortTasks(\r\n  tasks: AssignmentI[],\r\n  sortOption: string\r\n): AssignmentI[] {\r\n  const [sortKey, sortOrder] = sortOption.split(\"-\");\r\n\r\n  return tasks.sort((a, b) => {\r\n    if (sortKey === \"timestamp\") {\r\n      // Convert ISO timestamp strings to Date objects for proper comparison\r\n      const dateA = new Date(a.timestamp);\r\n      const dateB = new Date(b.timestamp);\r\n\r\n      return sortOrder === \"asc\"\r\n        ? dateA.getTime() - dateB.getTime()\r\n        : dateB.getTime() - dateA.getTime();\r\n    } else if (sortKey === \"title\") {\r\n      return sortOrder === \"desc\"\r\n        ? a.title.localeCompare(b.title)\r\n        : b.title.localeCompare(a.title);\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nexport function setupSortAndFilters(\r\n  members: MemberI[],\r\n  onFilterChange: () => void\r\n): void {\r\n  populateMemberFilter(members);\r\n  setupFilterListeners(onFilterChange);\r\n}\r\n\r\nfunction populateMemberFilter(members: MemberI[]): void {\r\n  const memberSelect = document.querySelector(\r\n    \"#filterMembers\"\r\n  ) as HTMLSelectElement;\r\n\r\n  // Clear existing options except the first \"All\" option\r\n  while (memberSelect.options.length > 1) {\r\n    memberSelect.remove(1);\r\n  }\r\n\r\n  members.forEach((member) => {\r\n    const option = document.createElement(\"option\");\r\n    option.value = member.id;\r\n    option.textContent = member.name;\r\n    memberSelect.appendChild(option);\r\n  });\r\n}\r\n\r\nfunction setupFilterListeners(onFilterChange: () => void): void {\r\n  const sortSelect = document.querySelector(\"#sortTasks\") as HTMLSelectElement;\r\n  const roleFilter = document.querySelector(\r\n    \"#filterTasks\"\r\n  ) as HTMLSelectElement;\r\n  const memberFilter = document.querySelector(\r\n    \"#filterMembers\"\r\n  ) as HTMLSelectElement;\r\n\r\n  [sortSelect, roleFilter, memberFilter].forEach((element) => {\r\n    element.addEventListener(\"change\", onFilterChange);\r\n  });\r\n}\r\n\r\nexport function getCurrentFilterOptions(): {\r\n  sortOption: string;\r\n  roleFilter: string;\r\n  memberFilter: string;\r\n} {\r\n  return {\r\n    sortOption: (document.querySelector(\"#sortTasks\") as HTMLSelectElement)\r\n      .value,\r\n    roleFilter: (document.querySelector(\"#filterTasks\") as HTMLSelectElement)\r\n      .value,\r\n    memberFilter: (\r\n      document.querySelector(\"#filterMembers\") as HTMLSelectElement\r\n    ).value,\r\n  };\r\n}\r\n"],"names":["$fe11eb32f95cc6d1$var$API_BASE","$fe11eb32f95cc6d1$export$f059b1ebfc1335c","res","fetch","ok","Error","statusText","json","error","alert","members","assignments","$fe11eb32f95cc6d1$export$d199869810608d4e","name","roles","method","headers","body","JSON","stringify","$fe11eb32f95cc6d1$export$fc41f58bd8b5bdc3","title","description","category","$fe11eb32f95cc6d1$export$13ce2202561ee22c","assignmentId","memberId","$fe11eb32f95cc6d1$export$ad679c2f191b46ef","$fe11eb32f95cc6d1$export$e0f6ca2291a97572","$d7bba91f677dd1f3$export$fa3e20990fc9859e","create","assign","markAsDone","remove","$1a5d3e8665c01fa1$export$88cc272b7f4c2e31","columns","new","document","querySelector","done","Object","values","forEach","column","header","innerHTML","appendChild","task","taskEl","createElement","className","status","Date","timestamp","toLocaleString","assigned","find","m","id","assignSelect","filter","includes","member","option","value","textContent","assignBtn","onclick","location","reload","doneBtn","deleteBtn","$ad2bcec7a0192558$var$memberForm","$ad2bcec7a0192558$var$taskForm","$ad2bcec7a0192558$var$allMembers","$ad2bcec7a0192558$var$allAssignments","$ad2bcec7a0192558$var$applyFiltersAndSort","sortOption","roleFilter","memberFilter","allAssignments","newTasks","inProgressTasks","doneTasks","filteredInProgress","$e808a74419138310$export$a8401629531bc33e","tasks","sortKey","sortOrder","split","sort","a","b","dateA","dateB","getTime","localeCompare","$ad2bcec7a0192558$var$init","scrumData","$e808a74419138310$var$populateMemberFilter","memberSelect","options","length","$e808a74419138310$var$setupFilterListeners","onFilterChange","sortSelect","element","addEventListener","event","preventDefault","Array","from","selectedOptions","map","o","reset"],"version":3,"file":"index.156a6ab6.js.map"}